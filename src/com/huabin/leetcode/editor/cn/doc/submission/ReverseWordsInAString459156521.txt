class Solution {
    public String reverseWords(String s) {
        // 解法一：时间空间复杂度O(n)
//        StringBuilder result = new StringBuilder();
//        int length = s.length();
//        int end = length;
//        for (int i = length - 1; i >= 0; i--) {
//            if (s.charAt(i) == ' ') {
//                if (i < end - 1) {
//                    result.append(s.substring(i + 1, end)).append(" ");
//                }
//                end = i;
//            } else if (i == 0) {
//                result.append(s.substring(i, end));
//            }
//        }
//        return result.toString();

        // 对以上方法优化，优化截取操作
        StringBuilder result = new StringBuilder();
        int length = s.length();
        int end = length;
        for (int i = length - 1; i >= 0; i--) {
            if (s.charAt(i) == ' ') {
                if (i < end - 1) {
                    if (result.length() > 0) {
                        result.append(" ");
                    }
                    result.append(s, i + 1, end);
                }
                end = i;
            } else if (i == 0) {
                if (result.length() > 0) {
                    result.append(" ");
                }
                result.append(s, i, end);
            }
        }
        return result.toString();
    }
}

//runtime:3 ms
//memory:40.4 MB
